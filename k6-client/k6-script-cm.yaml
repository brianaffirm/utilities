apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-script
  namespace: test-kotlin-dt
data:
  test-grpc.js: |
    import grpc from 'k6/net/grpc';
    import { check, sleep } from 'k6';

    const TARGET = __ENV.RPC_TARGET || 'test-kotlin-dt-grpc.stage.aff:443';
    const METHOD = __ENV.RPC_METHOD || 'affirm.test.grpc.v1.GrpcExampleService/GetExampleEndpoint';
    const HOST_HEADER = __ENV.RPC_HOST_HEADER || 'test-kotlin-dt-grpc.stage.aff';
    const INSECURE = (__ENV.TLS_INSECURE || 'false').toLowerCase() === 'true';
    const CERT_PATH = __ENV.TLS_CERT_PATH || '/nail/var/boba-pki-cert.pem';
    const KEY_PATH  = __ENV.TLS_KEY_PATH  || '/nail/var/boba-pki-key.pem';
    const SERVER_NAME = __ENV.TLS_SERVER_NAME || HOST_HEADER;

    export const options = {
      vus: Number(__ENV.K6_VUS || 10),
      duration: __ENV.K6_DURATION || '5m',
      thresholds: {
        grpc_req_duration: ['p(95)<500'],
        checks: ['rate>0.99'],
      },
    };

    const client = new grpc.Client();
    client.load(['/.'], 'example.proto');

    export function setup() {
      const tls = INSECURE
        ? { insecureSkipTLSVerify: true, servername: SERVER_NAME }
        : {
            cert: open(CERT_PATH),
            key: open(KEY_PATH),
            servername: SERVER_NAME,
          };
      client.connect(TARGET, { plaintext: false, tls });
    }

    export default function () {
      const metadata = {
        Host: HOST_HEADER,
        'content-type': 'application/grpc',
      };

      const req = { ari: __ENV.ARI || '' };
      const res = client.invoke(METHOD, req, { metadata });

      check(res, { 'status OK': (r) => r && r.status === grpc.StatusOK });
      sleep(Number(__ENV.K6_SLEEP || 0.1));
    }

    export function teardown() {
      client.close();
    }

